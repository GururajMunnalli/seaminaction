<?xml version="1.0"?>
<project name="seaminaction" default="help" basedir=".">

	<!-- creates a path that uses forward slashes, which Java understands cross-platform -->
	<pathconvert property="basedir.xplatform" targetos="unix">
		<path location="${basedir}"/>
	</pathconvert>

	<property file="${basedir.xplatform}/build.properties"/>
	<!--
	<property file="${seam.home}/build.properties" prefix="seamgen"/>
	-->

	<property name="databases.dir" value="${basedir.xplatform}/databases"/>
	<property name="etc.dir" value="${basedir.xplatform}/etc"/>
	<property name="lib.dir" value="${basedir.xplatform}/lib"/>
	<property name="opt.dir" value="${basedir.xplatform}/opt"/>
	<property name="projects.dir" value="${basedir.xplatform}/projects"/>
	<property name="prototype.dir" value="${basedir.xplatform}/prototype"/>
	<property name="stages.dir" value="${basedir.xplatform}/stages"/>
	<property name="vault.dir" value="${basedir.xplatform}/vault"/>

	<property name="jboss-as.distname" value="jboss-as-${jboss-as.version}"/>
	<property name="seam.distname" value="jboss-seam-${seam.version}"/>

	<property name="jboss.home" value="${opt.dir}/${jboss-as.distname}"/>
	<property name="jboss-as.home" value="${jboss.home}"/>
	<property name="seam.home" value="${opt.dir}/${seam.distname}"/>
	<property name="seam-gen.dir" value="${seam.home}/seam-gen"/>

	<property name="seam.archive.file" value="${seam.distname}.tar.gz"/>
	<property name="seam.archive.path" value="${vault.dir}/${seam.archive.file}"/>
	<property name="jboss-as.archive.file" value="${jboss-as.distname}.zip"/>
	<property name="jboss-as.archive.path" value="${vault.dir}/${jboss-as.archive.file}"/>

	<property name="sourceforge.mirror.jboss.baseurl" value="http://${sourceforge.mirror}/sourceforge/jboss"/> 
	<property name="glassfish.version" value="${glassfish.major.version}-${glassfish.build.number}"/>
	<condition property="glassfish.os.folder" value="Linux">
		<os name="Linux"/>
	</condition>
	<condition property="glassfish.target.os" value="linux">
		<os name="Linux"/>
	</condition>
	<condition property="glassfish.os.folder" value="Darwin">
		<os family="mac"/>
	</condition>
	<condition property="glassfish.target.os" value="darwin">
		<os family="mac"/>
	</condition>
	<property name="glassfish.os.folder" value="WINNT"/>
	<property name="glassfish.target.os" value="windows"/>
	<property name="glassfish.installer.jar" value="glassfish-installer-${glassfish.version}-${glassfish.target.os}.jar"/>
	<property name="glassfish.download.url" value="http://download.java.net/javaee5/${glassfish.major.version}/promoted/${glassfish.os.folder}/${glassfish.installer.jar}"/>

	<property name="jboss-as.domain" value="default"/>
	<property name="jboss-as.bin.dir" value="${jboss-as.home}/bin"/>
	<property name="jboss-as.deploy.dir" value="${jboss-as.home}/server/${jboss-as.domain}/deploy"/>
	<property name="jboss-as.conf.dir" value="${jboss-as.home}/server/${jboss-as.domain}/conf"/>
	<property name="jboss-as.lib.dir" value="${jboss-as.home}/server/${jboss-as.domain}/lib"/>
	<property name="svn.javahl" value="false"/>

	<property name="h2.jdbc.jar" value="${lib.dir}/h2.jar"/>
	<property name="open18.database.dir" value="${databases.dir}/open18-db"/>
	<property name="open18.jdbc.url" value="jdbc:h2:file:${open18.database.dir}/h2"/>
	<property name="open18.jdbc.username" value="open18"/>
	<property name="open18.jdbc.password" value="tiger"/>

	<mkdir dir="${databases.dir}"/>
	<mkdir dir="${projects.dir}"/>

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${lib.dir}/ant-contrib.jar"/>
		</classpath>
	</taskdef>

	<target name="help">
		<echo>
Run &quot;ant -projecthelp&quot; to get a list of the available targets.

You can use this script to automatically download JBoss AS and Seam. You
specify which versions to download and the sourceforge.net mirror to use
in the build.properties file.
</echo>
	</target>

	<target name="get-jboss" depends="get-jboss-as"/>

	<target name="get-jboss-as" description="Downloads JBoss AS and extracts it to the software directory (i.e., opt)">
		<mkdir dir="${vault.dir}"/>
		<if>
			<not><available file="${jboss-as.archive.path}"/></not>
			<then>
				<echo>Downloading JBoss AS (~100MB) may take a while. Please be patient.</echo>
				<get src="${sourceforge.mirror.jboss.baseurl}/jboss-${jboss-as.version}.zip"
					dest="${jboss-as.archive.path}"/>
			</then>
		</if>
		<if>
			<not><available file="${jboss-as.bin.dir}" type="dir"/></not>
			<then>
				<unzip src="${jboss-as.archive.path}" dest="${opt.dir}"/>
				<move file="${opt.dir}/jboss-${jboss-as.version}" tofile="${jboss-as.home}"/>
				<chmod file="${jboss-as.bin.dir}/run.sh" perm="775"/>
				<copy file="${etc.dir}/jboss-as-conf/run.conf" tofile="${jboss-as.bin.dir}/run.conf" overwrite="true"/>
				<copy file="${etc.dir}/jboss-as-conf/jboss-log4j.xml" tofile="${jboss-as.conf.dir}/jboss-log4j.xml" overwrite="true"/>
			</then>
		</if>
	</target>

	<target name="get-seam" description="Downloads Seam and extracts it to the software directory (i.e., opt)">
		<mkdir dir="${vault.dir}"/>
		<if>
			<not><available file="${seam.archive.path}"/></not>
			<then>
				<echo>Downloading Seam (~80MB) may take a while. Please be patient.</echo>
				<get src="${sourceforge.mirror.jboss.baseurl}/${seam.archive.file}"
					dest="${seam.archive.path}"/>
			</then>
		</if>
		<if>
			<not><available file="${seam-gen.dir}" type="dir"/></not>
			<then>
				<untar src="${seam.archive.path}" dest="${opt.dir}" compression="gzip"/>
				<chmod file="${seam.home}/seam" perm="775"/>
			</then>
		</if>
	</target>

	<target name="get-glassfish" description="Downloads GlassFish and extracts it to the software directory (i.e., opt)">
		<mkdir dir="${vault.dir}"/>
		<if>
			<not><available file="${vault.dir}/${glassfish.installer.jar}"/></not>
			<then>
				<echo>Downloading GlassFish (~50MB) may take a while. Please be patient.</echo>
				<get src="${glassfish.download.url}"
					dest="${vault.dir}/${glassfish.installer.jar}"/>
			</then>
		</if>
		<if>
			<not><available file="${opt.dir}/glassfish-${glassfish.major.version}/bin" type="dir"/></not>
			<then>
				<java jar="${vault.dir}/${glassfish.installer.jar}" fork="true"/>
				<move file="glassfish" tofile="${opt.dir}/glassfish-${glassfish.major.version}"/>
				<ant antfile="${opt.dir}/glassfish-${glassfish.major.version}/setup.xml" inheritAll="false">
					<property name="instance.port" value="7070"/>
					<property name="https.port" value="7171"/>
				</ant>
			</then>
		</if>
	</target>

	<target name="upgrade-icefaces" depends="verify-seam" description="Upgrades the ICEfaces version in Seam from 1.7.0 to 1.7.1">
		<replace file="${seam-gen.dir}/build.xml" token="1.7.0" value="1.7.1"/>
	</target>

	<target name="rehome" description="Replace any absolute paths with the location of this build file (or new.home property override)">
		<!-- defaults -->
		<property name="new.home" value="${basedir}"/>
		<property name="old.home" value="/home/twoputt"/>
		<!-- make Windows paths Java friendly -->
		<pathconvert property="new.home.xplatform" targetos="unix">
			<path location="${new.home}"/>
		</pathconvert>
		<pathconvert property="old.home.xplatform" targetos="unix">
			<path location="${old.home}"/>
		</pathconvert>
		<echo>Replacing references to ${old.home.xplatform} with ${new.home.xplatform}</echo>
		<replace dir="${stages.dir}" token="${old.home.xplatform}" value="${new.home.xplatform}">
			<patternset id="contains.filesystem.path">
				<include name="**/*.properties"/>
				<include name="**/*-ds.xml"/>
				<include name="**/*-datasource.xml"/>
				<exclude name="**/exploded-archives/**"/>
				<exclude name="**/test-build/**"/>
			</patternset>
		</replace>
		<!--
		<replace dir="${prototype.dir}" token="${old.home}" value="${new.home}">
			<patternset refid="contains.filesystem.path"/>
		</replace>
		-->
	</target>

	<target name="undeploy-all" description="Undeploy all projects from JBoss AS">
		<delete includeemptydirs="true">
			<fileset dir="${jboss-as.deploy.dir}">
				<exclude name="hsqldb-ds.xml"/>
				<exclude name="jmx-console.war/**"/>
				<include name="*.war/**"/>
				<include name="*.ear/**"/>
				<include name="*-ds.xml"/>
			</fileset>
		</delete>
	</target>

	<target name="list-deployments" description="List the current JBoss AS deployments">
		<dirset id="exploded-archives" dir="${jboss-as.deploy.dir}">
			<include name="*.war"/>
			<include name="*.ear"/>
			<exclude name="jmx-console.war"/>
		</dirset>
		<fileset id="packaged-archives" dir="${jboss-as.deploy.dir}">
			<include name="*.war"/>
			<include name="*.ear"/>
		</fileset>
		<fileset id="datasources" dir="${jboss-as.deploy.dir}">
			<exclude name="hsqldb-ds.xml"/>
			<include name="*-ds.xml"/>
		</fileset>
		<property name="exploded-archives" refid="exploded-archives"/>
		<property name="packaged-archives" refid="packaged-archives"/>
		<property name="datasources" refid="datasources"/>
		<echo message="exploded archives: ${exploded-archives}"/>
		<echo message="packaged archives: ${packaged-archives}"/>
		<echo message="datasources: ${datasources}"/>
	</target>

	<target name="deflate-all" description="Reverses the inflate process for all stages">
		<delete includeemptydirs="true">
			<fileset dir="${stages.dir}">
				<include name="*/*/lib/**"/>
				<include name="*/*/bootstrap/**"/>
			</fileset>
		</delete>
	</target>

	<target name="clean-all">
		<antcall target="invoke-on-all">
			<param name="target" value="clean"/>
		</antcall>
	</target>

	<target name="invoke-on-all">
		<fail unless="target" message="Please specify a target to invoke using -Dtarget=targetname"/>	
		<for param="project.build.file">
			<fileset dir="${stages.dir}">
				<include name="*/*/build.xml"/>
			</fileset>
			<!--
			<fileset dir="${prototype.dir}">
				<include name="*/*/build.xml"/>
			</fileset>
			-->
			<sequential>
				<var name="project.home" unset="true"/>
				<dirname property="project.home" file="@{project.build.file}"/>
				<ant dir="${project.home}" target="${target}" inheritAll="false"/>
			</sequential>
		</for>
	</target>

	<!-- java -cp lib/h2.jar org.h2.tools.Script -url jdbc:h2:file:databases/open18-db/h2\;IFEXISTS=true -user open18 -password tiger -script databases/export.sql -options NOSETTINGS DROP -->
	<target name="export-schema">
		<tstamp/>
		<java classname="org.h2.tools.Script" fork="true">
			<classpath>
				<pathelement location="${h2.jdbc.jar}"/>
			</classpath>
			<arg value="-url"/><arg value="${open18.jdbc.url};IFEXISTS=true"/>
			<arg value="-user"/><arg value="${open18.jdbc.username}"/>
			<arg value="-password"/><arg value="${open18.jdbc.password}"/>
			<arg value="-script"/><arg value="${databases.dir}/export-${DSTAMP}.sql"/>
			<!-- add NODATA to options to exclude data -->
			<arg value="-options"/><arg value="NOSETTINGS DROP"/>
		</java>
	</target>

	<!-- java -cp lib/h2.jar org.h2.tools.RunScript -url jdbc:h2:file:databases/open18-db/h2\;IFEXISTS=true -user open18 -password tiger -script databases/import.sql -->
	<target name="import-schema">
		<java classname="org.h2.tools.RunScript" fork="true">
			<classpath>
				<pathelement location="${h2.jdbc.jar}"/>
			</classpath>
			<arg value="-url"/><arg value="${open18.jdbc.url};IFEXISTS=true"/>
			<arg value="-user"/><arg value="${open18.jdbc.username}"/>
			<arg value="-password"/><arg value="${open18.jdbc.password}"/>
			<arg value="-script"/><arg value="${databases.dir}/import.sql"/>
		</java>
	</target>

	<!-- java -cp lib/h2.jar org.h2.tools.RunScript -url jdbc:h2:file:databases/open18-db/h2 -user open18 -password tiger -script etc/schema/open18-initial-schema.sql -->
	<!-- java -cp lib/h2.jar org.h2.tools.RunScript -url jdbc:h2:file:databases/open18-db/h2 -user open18 -password tiger -script etc/schema/open18-initial-seed-data.sql -->
	<target name="build-db" description="Build and seed the initial H2 database for Open 18">
		<delete failonerror="false">
			<fileset dir="${open18.database.dir}" includes="h2*"/>
		</delete>
		<java classname="org.h2.tools.RunScript" fork="true">
			<classpath>
				<pathelement location="${h2.jdbc.jar}"/>
			</classpath>
			<arg value="-url"/><arg value="${open18.jdbc.url}"/>
			<arg value="-user"/><arg value="${open18.jdbc.username}"/>
			<arg value="-password"/><arg value="${open18.jdbc.password}"/>
			<arg value="-script"/><arg value="${etc.dir}/schema/open18-initial-schema.sql"/>
		</java>
		<java classname="org.h2.tools.RunScript" fork="true">
			<classpath>
				<pathelement location="${h2.jdbc.jar}"/>
			</classpath>
			<arg value="-url"/><arg value="${open18.jdbc.url}"/>
			<arg value="-user"/><arg value="${open18.jdbc.username}"/>
			<arg value="-password"/><arg value="${open18.jdbc.password}"/>
			<arg value="-script"/><arg value="${etc.dir}/schema/open18-initial-seed-data.sql"/>
		</java>
	</target>

	<!-- java -cp lib/h2.jar org.h2.tools.RunScript -url jdbc:h2:file:databases/open18-db/h2 -user open18 -password tiger -script etc/schema/open18-trivia-seed-data-ch12.sql -->
	<target name="seed-trivia" description="Seed the Open 18 database with sample trivia questions (must first deploy chapter 12 stage)">
		<java classname="org.h2.tools.RunScript" fork="true">
			<classpath>
				<pathelement location="${h2.jdbc.jar}"/>
			</classpath>
			<arg value="-url"/><arg value="${open18.jdbc.url}"/>
			<arg value="-user"/><arg value="${open18.jdbc.username}"/>
			<arg value="-password"/><arg value="${open18.jdbc.password}"/>
			<arg value="-script"/><arg value="${etc.dir}/schema/open18-trivia-seed-data-ch12.sql"/>
		</java>
	</target>

	<target name="load-sql-script">
		<fail unless="script" message="Please specify a script to invoke using -Dscript=filename"/>	
		<java classname="org.h2.tools.RunScript" fork="true">
			<classpath>
				<pathelement location="${h2.jdbc.jar}"/>
			</classpath>
			<arg value="-url"/><arg value="${open18.jdbc.url}"/>
			<arg value="-user"/><arg value="${open18.jdbc.username}"/>
			<arg value="-password"/><arg value="${open18.jdbc.password}"/>
			<arg value="-script"/><arg value="${etc.dir}/schema/${script}"/>
		</java>
	</target>

	<target name="launch-h2-console" description="Launch the H2 database administration console">
		<echo message="Launching H2 admin console... (use Ctrl+C to shutdown)"/>
		<echo message="Use the JDBC URL: ${open18.jdbc.url};IFEXISTS=TRUE;FILE_LOCK=NO"/>
		<java classname="org.h2.tools.Server" fork="true">
			<classpath>
				<pathelement location="${h2.jdbc.jar}"/>
			</classpath>
			<arg value="-web"/>
		</java>
	</target>

	<target name="launch-h2" description="Launch the H2 database in client-server mode (requires different JDBC URL)">
		<echo message="Starting H2 and launching H2 admin console... (use Ctrl+C to shutdown)"/>
		<java classname="org.h2.tools.Server" fork="true">
			<classpath>
				<pathelement location="${h2.jdbc.jar}"/>	
			</classpath>
			<arg value="-tcp"/>
			<arg value="-web"/>
			<arg value="-baseDir"/><arg value="${databases.dir}"/>
		</java>
	</target>

	<target name="dist" depends="clean-all">
		<tstamp/>
		<mkdir dir="dist"/>
		<delete file="dist/seaminaction-${DSTAMP}.zip"/>
		<zip zipfile="dist/seaminaction-${DSTAMP}.zip">
			<zipfileset prefix="seaminaction" dir="${basedir.xplatform}">
				<include name="ant"/>
				<include name="ant.bat"/>
				<include name="build.xml"/>
				<include name="build.properties"/>
				<include name="README.txt"/>
				<include name="lib/h2.jar"/>
				<include name="lib/ant*jar"/>
				<include name="databases/open18-db/**"/>
				<include name="etc/**"/>

				<!-- temporary hack to include empty project directory -->
				<include name="projects/.directory"/>

				<include name="stages/**"/>
				<exclude name="stages/projects-baseline/**"/>
				<exclude name="stages/*/*/lib/**"/>
				<exclude name="stages/*/*/bootstrap/**"/>
				<exclude name="stages/*/*/exploded-archives/**"/>
				<exclude name="stages/*/*/nbproject/private/**"/>
			</zipfileset>
		</zip>
	</target>

	<!-- ant add-svn-ignores -Dpath=prototype/projects/golftips -->
	<!-- svn add `svn status | grep "^?" | sed 's/^? *//'` -->
	<target name="add-svn-ignores">
		<fail unless="path" message="Please specify a path using -Dpath=path/to/project"/>
		<taskdef resource="svntask.properties"/>
		<svn javahl="${svn.javahl}">
			<add dir="${path}" recurse="false"/>
		</svn>
		<svn javahl="${svn.javahl}">
			<propset path="${path}" name="svn:ignore" file="ignored-resources"/>
		</svn>
		<svn javahl="${svn.javahl}">
			<add dir="${path}/nbproject" recurse="false"/>
		</svn>
		<svn javahl="${svn.javahl}">
			<propset path="${path}/nbproject" name="svn:ignore" value="private"/>
		</svn>
	</target>

	<target name="verify-seam">
		<available property="seam.present" file="${seam-gen.dir}" type="dir"/>
		<fail unless="seam.present">Prerequisite not satisified.

Cannot find a Seam distribution. Use the following command to download Seam automatically (then break for lunch):

   ant get-seam</fail>
		<echo>Using Seam distribution at ${seam.home}</echo>
	</target>

	<target name="verify-jboss-as">
		<available property="jboss-as.present" file="${jboss-as.bin.dir}" type="dir"/>
		<if>
			<not><isset property="jboss-as.present"/></not>
			<then>
				<echo>Cannot find a JBoss AS installation. You must have JBoss AS available to deploy your application using the default configuration.</echo>
			</then>
		</if>
	</target>

	<target name="quickstart" depends="get-seam,get-jboss-as,rehome,build-db,update-project" description="Perform tasks to get started"/>

	<!-- can't do this until we can fetch the bootstrap directory -->
	<!--
	<target name="quickstart-ivy" depends="get-jboss-as,rehome,build-db,ivyize-project" description="Perform tasks to get started without the Seam distribution"/>
	-->

	<target name="deflate-project" depends="select-project" description="Remove the libraries for the selected project (menu provided)">
		<delete includeemptydirs="true">
			<fileset dir="${workspace.home}/${project.name}">
				<include name="lib/**"/>
				<include name="bootstrap/**"/>
			</fileset>
		</delete>
	</target>

	<target name="inflate-project" depends="update-project" description="An alias for update-project"/>

	<target name="update-project" depends="verify-seam,verify-jboss-as,select-project,upgrade-icefaces" description="Update the libraries for the selected project (menu provided)">
		<ant dir="${seam-gen.dir}" target="update-project" inheritAll="false">
			<property name="workspace.home" value="${workspace.home}"/>
			<property name="project.name" value="${project.name}"/>
			<property name="project.type" value="${project.type}"/>
			<property name="jboss.home" value="${jboss-as.home}"/>
			<property name="icefaces" value="${icefaces}"/>
			<property name="driver.jar" value="${h2.jdbc.jar}"/>
		</ant>
		<if>
			<isset property="jboss-as.present"/>
			<then>
				<copy todir="${jboss-as.lib.dir}" file="${h2.jdbc.jar}"/>
			</then>
			<else>
				<echo>You must copy h2.jar to the lib directory of the JBoss AS domain before deploying the application.</echo>
			</else>
		</if>
	</target>

	<target name="select-project">
		<echo>Available projects:

 A: projects-part1 (ch01) -> golftips
 B: projects-part1 (ch02) -> open18
 C: projects-part1 (ch02) -> open18ee
 D: projects-part1 (ch02) -> open18ice
 E: projects-ch03 -> open18
 F: projects-ch04 -> open18
 G: projects-ch05 -> open18
 H: projects-ch06 -> open18
 I: projects-part3 (ch07-ch10) -> open18
 J: projects-ch11 -> open18
 K: projects-ch12 -> open18
 L: projects-ch12 -> open18ice
 M: projects-ch13 -> open18
 N: projects-ch14 -> open18
 </echo>
		<input addproperty="project.index" message="Enter the letter that corresponds to the project you want to update:"
			validargs="A,B,C,D,E,F,G,H,I,J,K,L,M,N"/>
		<switch value="${project.index}">
			<case value="A">
				<property name="project.selection" value="projects-part1/golftips"/>
			</case>
			<case value="B">
				<property name="project.selection" value="projects-part1/open18"/>
			</case>
			<case value="C">
				<property name="project.selection" value="projects-part1/open18ee"/>
			</case>
			<case value="D">
				<property name="project.selection" value="projects-part1/open18ice"/>
			</case>
			<case value="E">
				<property name="project.selection" value="projects-ch03/open18"/>
			</case>
			<case value="F">
				<property name="project.selection" value="projects-ch04/open18"/>
			</case>
			<case value="G">
				<property name="project.selection" value="projects-ch05/open18"/>
			</case>
			<case value="H">
				<property name="project.selection" value="projects-ch06/open18"/>
			</case>
			<case value="I">
				<property name="project.selection" value="projects-part3/open18"/>
			</case>
			<case value="J">
				<property name="project.selection" value="projects-ch11/open18"/>
			</case>
			<case value="K">
				<property name="project.selection" value="projects-ch12/open18"/>
			</case>
			<case value="L">
				<property name="project.selection" value="projects-ch12/open18ice"/>
			</case>
			<case value="M">
				<property name="project.selection" value="projects-ch13/open18"/>
			</case>
			<case value="N">
				<property name="project.selection" value="projects-ch14/open18"/>
			</case>
		</switch>
		<basename property="project.name" file="${stages.dir}/${project.selection}"/>
		<dirname property="workspace.home" file="${stages.dir}/${project.selection}"/>
		<condition property="project.type" value="ear" else="war">
			<contains string="${project.name}" substring="ee"/>
		</condition>
		<condition property="icefaces" value="y" else="n">
			<contains string="${project.name}" substring="ice"/>
		</condition>
		<condition property="can.ivyize" value="true">
			<not>
				<or>
					<contains string="${project.name}" substring="ee"/>
					<contains string="${project.name}" substring="ice"/>
				</or>
			</not>
		</condition>
	</target>

	<target name="ivyize-project" depends="verify-seam,select-project" description="Integrate Ivy into project to manage dependencies (alternative to update-project)">
		<fail unless="can.ivyize">Sorry, the ivy configuration in this build only supports RichFaces WAR projects</fail>

		<property name="project.dir" value="${workspace.home}/${project.name}"/>

		<copy todir="${project.dir}">
			<fileset dir="${etc.dir}/ivy-configuration">
				<include name="ivy*xml"/>
			</fileset>
		</copy>
		
		<replace dir="${project.dir}" includes="build.xml">
			<not><contains text="ivy.build.xml"/></not>
			<replacetoken><![CDATA[<target name="init"]]></replacetoken>
			<replacevalue><![CDATA[<import file="${basedir}/ivy.build.xml"/>

    <target name="init"]]></replacevalue>
		</replace>

		<ant dir="${project.dir}" target="inflate" inheritAll="false">
			<property name="ivy.sync" value="true"/>
			<property name="lib.dir" value="${project.dir}/lib"/>
		</ant>

		<mkdir dir="${project.dir}/bootstrap"/>
		<copy todir="${project.dir}/bootstrap">
			<fileset dir="${seam.home}/bootstrap">
				<include name="**/*"/>
			</fileset>
		</copy>

	</target>

	<target name="upgrade-project" depends="verify-seam,select-project">

		<property name="project.dir" value="${workspace.home}/${project.name}"/>

		<replace dir="${project.dir}" token="-2.0.xsd" value="-2.1.xsd">
			<include name="resources/WEB-INF/components.xml"/>
			<include name="resources/WEB-INF/pages.xml"/>
			<include name="view/**/*.page.xml"/>
		</replace>

		<replace file="${project.dir}/resources/WEB-INF/components.xml" token="xmlns:pdf" value="xmlns:document"/>

		<replace file="${project.dir}/resources/WEB-INF/components.xml" token="http://jboss.com/products/seam/pdf" value="http://jboss.com/products/seam/document"/>

		<replace file="${project.dir}/resources/WEB-INF/components.xml">
			<replacetoken><![CDATA[<pdf:document-store]]></replacetoken>
			<replacevalue><![CDATA[<document:document-store]]></replacevalue>
		</replace>

		<replace file="${project.dir}/resources/WEB-INF/components.xml">
			<not><contains text="security:rule-based-permission-resolver"/></not>
			<replacetoken><![CDATA[<drools:rule-base name="securityRules">]]></replacetoken>
			<replacevalue><![CDATA[<security:rule-based-permission-resolver/>

   <drools:rule-base name="securityRules">]]></replacevalue>
		</replace>

		<replace file="${project.dir}/resources/WEB-INF/components.xml">
			<replacetoken><![CDATA[<framework:entity-query name="availableActorIdsQuery"
      ejbql="select m.username from Member m where m.username != #{identity.username}"
      order="m.username asc"/>]]></replacetoken>
			<replacevalue><![CDATA[<framework:entity-query name="availableActorIdsQuery"
      ejbql="select m.username from Member m"
      order="m.username asc">
      <framework:restrictions>
         <value>m.username != #{identity.username}</value>
      </framework:restrictions>
   </framework:entity-query>]]></replacevalue>
		</replace>

		<replace file="${project.dir}/resources/WEB-INF/components.xml">
			<replacetoken><![CDATA[<framework:entity-query name="friendsQuery"
      ejbql="select fl.friend from FriendLink fl where fl.golfer.username = #{currentGolfer.username}"
      order="fl.friend.lastName asc, fl.friend.firstName asc"/>]]></replacetoken>
			<replacevalue><![CDATA[<framework:entity-query name="friendsQuery"
      ejbql="select fl.friend from FriendLink fl"
      order="fl.friend.lastName asc, fl.friend.firstName asc">
      <framework:restrictions>
         <value>fl.golfer.username = #{currentGolfer.username}</value>
      </framework:restrictions>
   </framework:entity-query>]]></replacevalue>
		</replace>

		<replace file="${project.dir}/resources/security.drl"
			token="import org.jboss.seam.security.PermissionCheck;"
			value="import org.jboss.seam.security.permission.PermissionCheck;"/>

		<replace dir="${project.dir}" token="package org.jboss.seam.pdf" value="package org.jboss.seam.document">
			<include name="src/**/*.java"/>
		</replace>

		<replace dir="${project.dir}" token="new DocumentData" value="new ByteArrayDocumentData">
			<include name="src/**/*.java"/>
		</replace>

		<replace dir="${project.dir}">
			<include name="deployed-*.list"/>
			<not><contains text="itext-rtf.jar"/></not>
			<replacetoken><![CDATA[itext.jar]]></replacetoken>
			<replacevalue><![CDATA[itext.jar
itext-rtf.jar]]></replacevalue>
		</replace>

		<replace dir="${project.dir}">
			<include name="deployed-*.list"/>
			<not><contains text="jxl.jar"/></not>
			<replacetoken><![CDATA[jsf-facelets.jar]]></replacetoken>
			<replacevalue><![CDATA[jsf-facelets.jar
jxl.jar]]></replacevalue>
		</replace>

		<path id="script.classpath">
			<fileset dir="${lib.dir}">
				<include name="groovy-all.jar"/>
			</fileset>
		</path>

		<taskdef name="groovy"
			classname ="org.codehaus.groovy.ant.Groovy"
			classpathref="script.classpath"/>

		<groovy><![CDATA[
def candidates = ant.fileScanner {
	fileset(dir: '${project.dir}/src') {
		and {
			contains(text: ' extends EntityQuery ')
			contains(text: 'RESTRICTIONS')
			not {
				contains(text: 'EJBQL')
			}
		}
		include(name: '**/*List.java')
	}
}
candidates.each {
	def className = it.name.replace(".java", "")
	def entityName = className.replace("List", "")
	def text = it.text
	text = text.replaceAll("public class (.*)List extends EntityQuery \\{", "public class \$1List extends EntityQuery<\$1> {")

	def cleanerPattern = ~/(?s).*(\n\n\t+@Override\s+public List<String> getRestrictions\(\) \{[^\}]*\}).*/
	def cleanerMatcher = cleanerPattern.matcher(text)
	text = text.replace(cleanerMatcher[0][1], "")

	cleanerPattern = ~/(?s).*(\n\n\t+@Override\s+public Integer getMaxResults\(\) \{[^\}]*\}).*/
	cleanerMatcher = cleanerPattern.matcher(text)
	text = text.replace(cleanerMatcher[0][1], "")

	def queryPattern = ~/(?s).*(\n\t+@Override\s+public String getEjbql\(\) \{\s+return "([^"]+)";\s+}).*/
	def queryMatcher = queryPattern.matcher(text)

	text = text.replace("private static final String[] RESTRICTIONS = {", """private static final String EJBQL = \"${queryMatcher[0][2]}\";

	private static final String[] RESTRICTIONS = {""")

	def constrPattern = ~/(?s).*(\t+public ${className}\(\) \{).*/
	def constrMatcher = constrPattern.matcher(text)

	if (constrMatcher.matches()) {
		text = text.replace(queryMatcher[0][1], "")
		text = text.replace(constrMatcher[0][1], """	public ${className}() {
		setEjbql(EJBQL);
		setRestrictionExpressionStrings(Arrays.asList(RESTRICTIONS));
		setMaxResults(25);""")
	}
	else {
		text = text.replace(queryMatcher[0][1], """
	public ${className}() {
		setEjbql(EJBQL);
		setRestrictionExpressionStrings(Arrays.asList(RESTRICTIONS));
		setMaxResults(25);
	}""")
	}
	it.write(text)
}
		]]></groovy>

	</target>

</project>
