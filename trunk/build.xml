<?xml version="1.0"?>
<project name="seaminaction" default="help" basedir=".">
	<!-- Display seam version (and verify there is a seam dist present) -->

	<property name="jboss.home" value="${basedir}/opt/jboss-as-4.2.2.GA"/>
	<property name="seam.dist" value="${basedir}/opt/jboss-seam-2.0.3.CR1"/>
	<!--
	<property file="${seam.dist}/build.properties"/>
	-->
	<property name="jboss.deploy.dir" value="${jboss.home}/server/default/deploy"/>
	<property name="jboss.lib.dir" value="${jboss.home}/server/default/lib"/>
	<property name="svn.javahl" value="false"/>

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="/home/twoputt/lib/ant-contrib-1.0b2.jar"/>
		</classpath>
	</taskdef>

	<target name="help">
		<echo message="Planning on putting some help here"/>
	</target>

	<target name="rehome">
		<fail unless="home" message="Please specify a new home using -Dhome=C:/NAME_OF_HOME_FOLDER"/>
		<condition property="replacement.token" value="${old.home}" else="/home/twoputt">
			<isset property="old.home"/>
		</condition>
		<replace dir="${basedir}/stages" token="${replacement.token}" value="${home}">
			<include name="**/*.properties"/>
			<include name="**/*-ds.xml"/>
			<include name="**/*-datasource.xml"/>
			<exclude name="**/exploded-archives/**"/>
		</replace>
	</target>

	<target name="undeploy-all">
		<delete includeemptydirs="true">
			<fileset dir="${jboss.deploy.dir}">
				<exclude name="hsqldb-ds.xml"/>
				<exclude name="jmx-console.war/**"/>
				<include name="*.war/**"/>
				<include name="*.ear/**"/>
				<include name="*-ds.xml"/>
			</fileset>
		</delete>
	</target>

	<target name="list-deployments">
		<dirset id="exploded-archives" dir="${jboss.deploy.dir}">
			<include name="*.war"/>
			<include name="*.ear"/>
			<exclude name="jmx-console.war"/>
		</dirset>
		<fileset id="packaged-archives" dir="${jboss.deploy.dir}">
			<include name="*.war"/>
			<include name="*.ear"/>
		</fileset>
		<fileset id="datasources" dir="${jboss.deploy.dir}">
			<exclude name="hsqldb-ds.xml"/>
			<include name="*-ds.xml"/>
		</fileset>
		<property name="exploded-archives" refid="exploded-archives"/>
		<property name="packaged-archives" refid="packaged-archives"/>
		<property name="datasources" refid="datasources"/>
		<echo message="exploded archives: ${exploded-archives}"/>
		<echo message="packaged archives: ${packaged-archives}"/>
		<echo message="datasources: ${datasources}"/>
	</target>

	<target name="clean-all">
		<antcall target="-invoke-all">
			<param name="subject" value="project"/>
			<param name="invoke.target" value="clean"/>
		</antcall>
	</target>

	<!-- java -cp lib/h2.jar org.h2.tools.Script -url jdbc:h2:file:databases/open18-db/h2\;IFEXISTS=true -user open18 -password tiger -script databases/export.sql -options NOSETTINGS DROP -->
	<target name="export-schema">
		<tstamp/>
		<java classname="org.h2.tools.Script" fork="true">
			<classpath>
				<pathelement location="${basedir}/lib/h2.jar"/>
			</classpath>
			<arg value="-url"/><arg value="jdbc:h2:file:${basedir}/databases/open18-db/h2;IFEXISTS=true"/>
			<arg value="-user"/><arg value="open18"/>
			<arg value="-password"/><arg value="tiger"/>
			<arg value="-script"/><arg value="databases/export-${DSTAMP}.sql"/>
			<!-- add NODATA to options to exclude data -->
			<arg value="-options"/><arg value="NOSETTINGS DROP"/>
		</java>
	</target>

	<!-- java -cp lib/h2.jar org.h2.tools.RunScript -url jdbc:h2:file:databases/open18-db/h2\;IFEXISTS=true -user open18 -password tiger -script databases/import.sql -->
	<target name="import-schema">
		<java classname="org.h2.tools.RunScript" fork="true">
			<classpath>
				<pathelement location="${basedir}/lib/h2.jar"/>
			</classpath>
			<arg value="-url"/><arg value="jdbc:h2:file:${basedir}/databases/open18-db/h2;IFEXISTS=true"/>
			<arg value="-user"/><arg value="open18"/>
			<arg value="-password"/><arg value="tiger"/>
			<arg value="-script"/><arg value="databases/import.sql"/>
		</java>
	</target>

	<!-- java -cp lib/h2.jar org.h2.tools.RunScript -url jdbc:h2:file:databases/open18-db/h2 -user open18 -password tiger -script etc/schema/open18-initial-schema.sql -->
	<!-- java -cp lib/h2.jar org.h2.tools.RunScript -url jdbc:h2:file:databases/open18-db/h2 -user open18 -password tiger -script etc/schema/open18-seed-data.sql -->
	<target name="build-db">
		<delete failonerror="false">
			<fileset dir="${basedir}/databases/open18-db" includes="h2*"/>
		</delete>
		<java classname="org.h2.tools.RunScript" fork="true">
			<classpath>
				<pathelement location="${basedir}/lib/h2.jar"/>
			</classpath>
			<arg value="-url"/><arg value="jdbc:h2:file:${basedir}/databases/open18-db/h2"/>
			<arg value="-user"/><arg value="open18"/>
			<arg value="-password"/><arg value="tiger"/>
			<arg value="-script"/><arg value="etc/schema/open18-initial-schema.sql"/>
		</java>
		<java classname="org.h2.tools.RunScript" fork="true">
			<classpath>
				<pathelement location="${basedir}/lib/h2.jar"/>
			</classpath>
			<arg value="-url"/><arg value="jdbc:h2:file:${basedir}/databases/open18-db/h2"/>
			<arg value="-user"/><arg value="open18"/>
			<arg value="-password"/><arg value="tiger"/>
			<arg value="-script"/><arg value="etc/schema/open18-seed-data.sql"/>
		</java>
	</target>

	<!-- java -cp lib/h2.jar org.h2.tools.RunScript -url jdbc:h2:file:databases/open18-db/h2 -user open18 -password tiger -script etc/schema/open18-trivia-data.sql -->
	<target name="seed-trivia">
		<java classname="org.h2.tools.RunScript" fork="true">
			<classpath>
				<pathelement location="${basedir}/lib/h2.jar"/>
			</classpath>
			<arg value="-url"/><arg value="jdbc:h2:file:${basedir}/databases/open18-db/h2"/>
			<arg value="-user"/><arg value="open18"/>
			<arg value="-password"/><arg value="tiger"/>
			<arg value="-script"/><arg value="etc/schema/open18-trivia-data.sql"/>
		</java>
	</target>

	<target name="launch-h2-console">
		<echo message="Launching H2 admin console... (use Ctrl+C to shutdown)"/>
		<echo message="Use the JDBC URL: jdbc:h2:file:/home/twoputt/databases/open18-db/h2;IFEXISTS=TRUE;FILE_LOCK=NO"/>
		<java classname="org.h2.tools.Server" fork="true">
			<classpath>
				<pathelement location="lib/h2.jar"/>	
			</classpath>
			<arg value="-web"/>
		</java>
	</target>

	<target name="launch-h2">
		<echo message="Starting H2 and launching H2 admin console... (use Ctrl+C to shutdown)"/>
		<java classname="org.h2.tools.Server" fork="true">
			<classpath>
				<pathelement location="lib/h2.jar"/>	
			</classpath>
			<arg value="-tcp"/>
			<arg value="-web"/>
			<arg value="-baseDir"/><arg value="databases"/>
		</java>
	</target>

	<target name="dist" depends="clean-all">
		<tstamp/>
		<delete file="dist/seaminaction-${DSTAMP}.zip"/>
		<zip zipfile="dist/seaminaction-${DSTAMP}.zip">
			<zipfileset prefix="seaminaction" dir="${basedir}">
				<include name="build.xml"/>
				<include name="readme.txt"/>
				<include name="lib/h2.jar"/>
				<include name="lib/jtidy*"/>
				<include name="lib/icefaces/**"/>
				<include name="stages/**"/>
				<include name="databases/open18-db/**"/>
				<include name="databases/open18-db*"/>
				<include name="databases/open18-directory*"/>
				<include name="etc/**"/>

				<!-- temporary hack to include empty project directory -->
				<include name="projects/.directory"/>

				<!-- only include projects of interest
				<include name="projects/golftips/**"/>
				<include name="projects/open18_war/**"/>
				<include name="projects/open18_clubhouse/**"/>
				<exclude name="projects/*/lib/**"/>
				-->

				<exclude name="stages/*/*/lib/**"/>
				<exclude name="stages/*/*/bootstrap/**"/>
			</zipfileset>
		</zip>
	</target>

	<!-- ant add-svn-ignores -Dpath=prototype/projects/golftips -->
	<!-- svn add `svn status | grep "^?" | sed 's/^? *//'` -->
	<target name="add-svn-ignores">
		<fail unless="path" message="Please specify a path using -Dpath=path/to/project"/>
		<taskdef resource="svntask.properties"/>
		<svn javahl="${svn.javahl}">
			<add dir="${path}" recurse="false"/>
		</svn>
		<svn javahl="${svn.javahl}">
			<propset path="${path}" name="svn:ignore" file="ignored-resources"/>
		</svn>
		<svn javahl="${svn.javahl}">
			<add dir="${path}/nbproject" recurse="false"/>
		</svn>
		<svn javahl="${svn.javahl}">
			<propset path="${path}/nbproject" name="svn:ignore" value="private"/>
		</svn>
	</target>

	<target name="update-project" depends="select-project">
		<ant dir="${seam.dist}/seam-gen" target="update-project" inheritAll="false">
			<property name="workspace.home" value="${workspace.home}"/>
			<property name="project.name" value="${project.name}"/>
			<property name="project.type" value="${project.type}"/>
		</ant>
	</target>

	<target name="select-project">
		<echo>Available projects:

 A: projects-part1 -> golftips
 B: projects-part1 -> open18
 C: projects-part1 -> open18ee
 D: projects-ch03 -> open18
 E: projects-ch04 -> open18
 F: projects-ch05 -> open18
 G: projects-ch06 -> open18
 H: projects-part3 -> open18
 I: projects-ch11 -> open18
 J: projects-ch12 -> open18
 K: projects-ch13 -> open18
 </echo>
		<input addproperty="project.index" message="Enter the number that corresponds to the project you want to update:"
			validargs="A,B,C,D,E,F,G,H,I,J,K"/>
		<switch value="${project.index}">
			<case value="A">
				<property name="project.selection" value="projects-part1/golftips"/>
			</case>
			<case value="B">
				<property name="project.selection" value="projects-part1/open18"/>
			</case>
			<case value="C">
				<property name="project.selection" value="projects-part1/open18ee"/>
			</case>
			<case value="D">
				<property name="project.selection" value="projects-ch03/open18"/>
			</case>
			<case value="E">
				<property name="project.selection" value="projects-ch04/open18"/>
			</case>
			<case value="F">
				<property name="project.selection" value="projects-ch05/open18"/>
			</case>
			<case value="H">
				<property name="project.selection" value="projects-ch06/open18"/>
			</case>
			<case value="H">
				<property name="project.selection" value="projects-part3/open18"/>
			</case>
			<case value="I">
				<property name="project.selection" value="projects-ch11/open18"/>
			</case>
			<case value="J">
				<property name="project.selection" value="projects-ch12/open18"/>
			</case>
			<case value="K">
				<property name="project.selection" value="projects-ch13/open18"/>
			</case>
		</switch>
		<propertyregex property="project.name"
			input="${project.selection}"
			regexp="^.*/(.*)$"
			select="\1"/>
		<propertyregex property="workspace.home"
			input="${project.selection}"
			regexp="^(.*)/.*$"
			select="${basedir}/stages/\1"/>
		<condition property="project.type" value="ear" else="war">
			<contains string="${project.name}" substring="ee"/>
		</condition>
	</target>

</project>
