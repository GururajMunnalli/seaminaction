Seam in Action: Part 2
----------------------
This file details developments made to the application source code during this
part of the book. Please note that the enhancements described here my go beyond
what is covered in the book.

golftips:

NOTE: I intentially did not use <s:decorate> in this example to make the
component markup easier for beginners to follow. I cover <s:decorate> in
chapter 3 and include use it in the development of the registration form.
Feel free to use <s:decorate> liberally in your own application.

  - Get started by running:

  ./seam new-form

  using the following responses:

  * Seam component name: tipAction
  * Bean class name: TipAction
  * Action method name: add
  * Page name: golftips

  - Create entity class named GolfTip, make it a Seam component named "tip"
  - Populate import-dev.sql to seed the database with 3 sample records
  - In the TipAction component:
    - wire in the EntityManager
	- create factory for "tips" that retrieve all tips
	- tips should be exported using @DataModel into the page scope
	- implement add(GolfTip) method that validates and persists the tip and notifies user of success
	- implement delete() to delete tip in activated row
  - In the GolfTipsTest test class:
    - ensure there are no tips to begin
	- add a tip
	- ensure there is one tip
	- ensure that the user was notified of success
  - create golftips.xhtml to list existing tips and accept a new tip via a form
  - Applied by standard RichFaces style fixes to seam-gen and some styles needed for golftips.xhtml

open18-db:

  - setup initial schema and import the seed data using the following two commands from the /home/twoputt directory:

java -cp lib/h2.jar org.h2.tools.RunScript -url jdbc:h2:file:databases/open18-db/h2 -user open18 -password tiger -script etc/schema/open18-initial-schema.sql
java -cp lib/h2.jar org.h2.tools.RunScript -url jdbc:h2:file:databases/open18-db/h2 -user open18 -password tiger -script etc/schema/open18-seed-data.sql

open18:

  - a WAR seam-gen project for the Open 18 application
  - note that seam-gen.properties in root of project contains the responses used during setup
  - reverse engineered initial schema to create standard seam-gen CRUD application (fields are sorted alphabetically)
    - final reverse engineering configuration can be found here: etc/reveng/open18-seam-gen.reveng.xml
  - customized various entity property names and added supplemental methods using seam-gen.reveng.xml
  - set the default sort order to the name property for both Course and Facility listings
  - add color to the tee sets whereever they are displayed
  - sort the tee sets and holes displayed on the course page (CourseHome)
  - modified the style of messages to make them more attractive (JBSEAM-2033)
  - added RichFaces style customizations (style.xcss) and special overrides for the emeraldTown skin
  - added favicon and the corresponding <link> in layout/template.xhtml
  - prepared project so that it can be deployed to GlassFish
  - hide the description column on listing pages and assocation tables (it takes up too much space)
  - make the uri of facilities on listing page into links

open18ee:

  - an EAR seam-gen project for the Open 18 application
  - same exact modifications as made to the open18 WAR project
  - unfortunately, deployment to GlassFish does *not* work
