#summary Enhancements to seam-gen or workarounds for outstanding issues.
#labels seam-gen,Featured,oracle

= Introduction =

The seam-gen tool is a good start, but it does not handle all scenarios. Part of this is intentionally for simplicity sake and part is that seam-gen still has room to grow. This page documents several enhancements to seam-gen to help get you further along.


== Boolean types in Oracle ==

It is conventional to represent a boolean type in oracle using a CHAR(1) column with the values "y" or "n" to represent true and false. JPA cannot accommodate this mapping, but it is possible by using a Hibernate extension annotation. Here is an example of a boolean property named "excluded" mapped to a CHAR(1) column in Oracle using the Hibernate "yes_no" custom type.

{{{
private boolean excluded;

@Column(name = "EXCLUDED_YN", length = 1)
@Type(type = "yes_no")
public boolean isExclude() {
    return this.exclude;
}

public void setExclude(boolean exclude) {
    this.exclude = exclude;
}
}}}

If you want this annotation applied automatically during the seam-gen reverse engineering, edit the file seam-gen/pojo/GetPropertyAnnotation.ftl in the seam distribution and replace it with the following contents:

{{{
<#include "Ejb3PropertyGetAnnotation.ftl"/>
<#if !property.equals(pojo.identifierProperty) && property.type.name == 'boolean'
  && cfg.properties['database.type'] == 'oracle'>
    @${pojo.importType("org.hibernate.annotations.Type")}(type = "yes_no")
</#if>
<#if property.columnSpan == 1>
<#assign column = property.getColumnIterator().next()/>
<#if !c2h.isManyToOne(property) && !c2h.isTemporalValue(property) && column.length != 255
  && property.type.name != "character" && property.type.name != "boolean">
    @${pojo.importType("org.hibernate.validator.Length")}(max=${column.length?c})
</#if>
</#if>
}}}
