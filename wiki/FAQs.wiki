#summary Frequently asked questions
#labels FAQ

----

  * *When do I use @In vs @PersistenceContext to inject an EntityManager*

  Please see [http://seamframework.org/Documentation/WhenDoIUseInVsPersistenceContextToInjectAnEntityManager this FAQ] on the Seam wiki.

  * *Why is the @DataModelSelection property annotated with @Out and not @In? (golftips example)*

  The @DataModelSelection is a variation of the @In annotation. The @Out annotation turns around and pushes the selected item injected by @DataModelSelection back out into a context as a top-level variable. Without @Out, the selection would only be available while the method is executing.

  * *Why does the first row of the DataModel sometimes get selected (and outjected) before any explicit selection is performed?*

  This commonly happens when you are using @Out and @DataModelSelection on the same field. You see, the @DataModelSelection is populated the next time bijection occurs on a component after the @DataModel is outjected. That can happen while the page is still rendering, not necessarily on the postback. For instance, let's say that the toString() method is called on the component. Seam will populated the @DataModelSelection field and then subsequently outject the value as defined by the @Out annotation.

  My recommendation is to always use a different field for @Out and @DataModelSelection so that you can programmatically control when the object reference is transferred.

  As for why the first row is always selected, when no row of a DataModel is explicitly selected, JSF leaves the pointer on the first row :(

  * *I get an error when using @RequestParameter on a field with a primitive type. Why?*

  The @RequestParameter annotation does not require a value by default (in fact, there isn't even a setting). If the request parameter is missing, Seam will attempt to assign a null value to the field. If the field is a primitive type, Seam will be unable to perform the assignment in this case and, as a result, an error will be thrown.

  Therefore, if the field you are adding the @RequestParameter annotation to is a primitive type (e.g. int), change the field type to a primitive wrapper class (e.g. Integer). You will then have to be prepared for a null value, but that you can handle in your business logic.

  * *When do I use @Remove and @Destroy on a SFSB?*

  In Seam 2, if you have exactly one @Remove method, it's automatically made the @Destroy method. If you have multiple @Remove methods, you need @Destroy. Also @Remove @Destroy methods must have no parameters.

  * *How does the default locale work? When is it used?*

  Please see [http://seamframework.org/Documentation/HowDoesTheDefaultLocaleWorkWhenIsItUsed this FAQ] on the Seam wiki.

  * *Why do the collections on the entities in the sample application appear more than once?*

  This problem is related to the hibernate.hbm2ddl.auto setting. If the option is set to "none" (and the database is replaced with the initial one from the sample code download) no duplicate mappings are present. If the setting is set to "update", then generate creates duplicate mappings after the next server restart.

  It is actually a bug in Hibernate [http://opensource.atlassian.com/projects/hibernate/browse/HHH-3532 HHH-3532] that I am lobbying to get corrected. It just doesn't detect the foreign keys correctly and keeps creating them over and over.

  This issue has really bitten me hard and made setting up the sample application a little harder than it had to be. A workaround is to go into the tables and delete the duplicate foreign keys.