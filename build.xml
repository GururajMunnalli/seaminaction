<?xml version="1.0"?>
<project name="seaminaction" default="help" basedir=".">

	<property file="${basedir}/build.properties"/>
	<!--
	<property file="${seam.home}/build.properties" prefix="seamgen"/>
	-->

	<property name="databases.dir" value="${basedir}/databases"/>
	<property name="etc.dir" value="${basedir}/etc"/>
	<property name="lib.dir" value="${basedir}/lib"/>
	<property name="opt.dir" value="${basedir}/opt"/>
	<property name="projects.dir" value="${basedir}/projects"/>
	<property name="prototype.dir" value="${basedir}/prototype"/>
	<property name="stages.dir" value="${basedir}/stages"/>
	<property name="vault.dir" value="${basedir}/vault"/>

	<property name="jboss-as.distname" value="jboss-as-${jboss-as.version}"/>
	<property name="seam.distname" value="jboss-seam-${seam.version}"/>

	<property name="jboss.home" value="${opt.dir}/${jboss-as.distname}"/>
	<property name="jboss-as.home" value="${jboss.home}"/>
	<property name="seam.home" value="${opt.dir}/${seam.distname}"/>

	<property name="seam.archive.file" value="${seam.distname}.tar.gz"/>
	<property name="seam.archive.path" value="${vault.dir}/${seam.archive.file}"/>
	<property name="jboss-as.archive.file" value="${jboss-as.distname}.zip"/>
	<property name="jboss-as.archive.path" value="${vault.dir}/${jboss-as.archive.file}"/>

	<property name="sourceforge.mirror.jboss.baseurl" value="http://${sourceforge.mirror}/sourceforge/jboss"/> 

	<property name="jboss-as.domain" value="default"/>
	<property name="jboss-as.deploy.dir" value="${jboss-as.home}/server/${jboss-as.domain}/deploy"/>
	<property name="jboss-as.lib.dir" value="${jboss-as.home}/server/${jboss-as.domain}/lib"/>
	<property name="svn.javahl" value="false"/>

	<property name="h2.jdbc.jar" value="${h2.jdbc.jar}"/>
	<property name="${open18.database.dir}" value="${databases.dir}/open18-db"/>
	<property name="${open18.jdbc.url}" value="jdbc:h2:file:${open18.database.dir}/h2"/>
	<property name="${open18.jdbc.username}" value="open18"/>
	<property name="${open18.jdbc.password}" value="tiger"/>

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${lib.dir}/ant-contrib.jar"/>
		</classpath>
	</taskdef>

	<target name="help">
		<echo>
Run &quot;ant -projecthelp&quot; to get a list of the available targets.

You can use this script to automatically download JBoss AS and Seam. You
specify which versions to download and the sourceforge.net mirror to use
in the build.properties file.
</echo>
	</target>

	<target name="get-jboss" depends="get-jboss-as"/>

	<target name="get-jboss-as" description="Downloads JBoss AS and extracts it to the software directory (i.e., opt)">
		<mkdir dir="${vault.dir}"/>
		<if>
			<not><available file="${jboss-as.archive.path}"/></not>
			<then>
				<echo>Downloading JBoss AS (~100MB) may take a while. Please be patient.</echo>
				<get src="${sourceforge.mirror.jboss.baseurl}/jboss-${jboss-as.version}.zip"
					dest="${jboss-as.archive.path}"/>
			</then>
		</if>
		<if>
			<not><available file="${jboss-as.home}/bin" type="dir"/></not>
			<then>
				<untar src="${jboss-as.archive.path}" dest="${opt.dir}" compression="gzip"/>
				<rename file="${opt.dir}/jboss-${jboss-as.version}" tofile="${jboss-as.home}"/>
			</then>
		</if>
	</target>

	<target name="get-seam" description="Downloads Seam and extracts it to the software directory (i.e., opt)">
		<mkdir dir="${vault.dir}"/>
		<if>
			<not><available file="${seam.archive.path}"/></not>
			<then>
				<echo>Downloading Seam (~80MB) may take a while. Please be patient.</echo>
				<get src="${sourceforge.mirror.jboss.baseurl}/${seam.archive.file}"
					dest="${seam.archive.path}"/>
			</then>
		</if>
		<if>
			<not><available file="${seam.home}/seam-gen" type="dir"/></not>
			<then>
				<untar src="${seam.archive.path}" dest="${opt.dir}" compression="gzip"/>
			</then>
		</if>
	</target>

	<target name="rehome" description="Replace any absolute paths with the path specified in the -Dhome=XXX argument">
		<fail unless="home" message="Please specify a new home using -Dhome=C:/projects/EXAMPLE_CODE_FOLDER_NAME"/>
		<condition property="replacement.token" value="${old.home}" else="/home/twoputt">
			<isset property="old.home"/>
		</condition>
		<replace dir="${stages.dir}" token="${replacement.token}" value="${home}">
			<patternset id="contains.filesystem.path">
				<include name="**/*.properties"/>
				<include name="**/*-ds.xml"/>
				<include name="**/*-datasource.xml"/>
				<exclude name="**/exploded-archives/**"/>
				<exclude name="**/test-build/**"/>
			</patternset>
		</replace>
		<!--
		<replace dir="${prototype.dir}" token="${replacement.token}" value="${home}">
			<patternset refid="contains.filesystem.path"/>
		</replace>
		-->
	</target>

	<target name="undeploy-all" description="Undeploy all projects from JBoss AS">
		<delete includeemptydirs="true">
			<fileset dir="${jboss-as.deploy.dir}">
				<exclude name="hsqldb-ds.xml"/>
				<exclude name="jmx-console.war/**"/>
				<include name="*.war/**"/>
				<include name="*.ear/**"/>
				<include name="*-ds.xml"/>
			</fileset>
		</delete>
	</target>

	<target name="list-deployments" description="List the current JBoss AS deployments">
		<dirset id="exploded-archives" dir="${jboss-as.deploy.dir}">
			<include name="*.war"/>
			<include name="*.ear"/>
			<exclude name="jmx-console.war"/>
		</dirset>
		<fileset id="packaged-archives" dir="${jboss-as.deploy.dir}">
			<include name="*.war"/>
			<include name="*.ear"/>
		</fileset>
		<fileset id="datasources" dir="${jboss-as.deploy.dir}">
			<exclude name="hsqldb-ds.xml"/>
			<include name="*-ds.xml"/>
		</fileset>
		<property name="exploded-archives" refid="exploded-archives"/>
		<property name="packaged-archives" refid="packaged-archives"/>
		<property name="datasources" refid="datasources"/>
		<echo message="exploded archives: ${exploded-archives}"/>
		<echo message="packaged archives: ${packaged-archives}"/>
		<echo message="datasources: ${datasources}"/>
	</target>

	<target name="clean-all">
		<antcall target="invoke-on-all">
			<param name="target" value="clean"/>
		</antcall>
	</target>

	<target name="invoke-on-all">
		<fail unless="target" message="Please specify a target to invoke using -Dtarget=targetname"/>	
		<for param="project.build.file">
			<fileset dir="${stages.dir}">
				<include name="*/*/build.xml"/>
			</fileset>
			<!--
			<fileset dir="${prototype.dir}">
				<include name="*/*/build.xml"/>
			</fileset>
			-->
			<sequential>
				<var name="project.home" unset="true"/>
				<dirname property="project.home" file="@{project.build.file}"/>
				<ant dir="${project.home}" target="${target}" inheritAll="false"/>
			</sequential>
		</for>
	</target>

	<!-- java -cp lib/h2.jar org.h2.tools.Script -url jdbc:h2:file:databases/open18-db/h2\;IFEXISTS=true -user open18 -password tiger -script databases/export.sql -options NOSETTINGS DROP -->
	<target name="export-schema">
		<tstamp/>
		<java classname="org.h2.tools.Script" fork="true">
			<classpath>
				<pathelement location="${h2.jdbc.jar}"/>
			</classpath>
			<arg value="-url"/><arg value="${open18.jdbc.url};IFEXISTS=true"/>
			<arg value="-user"/><arg value="${open18.jdbc.username}"/>
			<arg value="-password"/><arg value="${open18.jdbc.password}"/>
			<arg value="-script"/><arg value="${databases.dir}/export-${DSTAMP}.sql"/>
			<!-- add NODATA to options to exclude data -->
			<arg value="-options"/><arg value="NOSETTINGS DROP"/>
		</java>
	</target>

	<!-- java -cp lib/h2.jar org.h2.tools.RunScript -url jdbc:h2:file:databases/open18-db/h2\;IFEXISTS=true -user open18 -password tiger -script databases/import.sql -->
	<target name="import-schema">
		<java classname="org.h2.tools.RunScript" fork="true">
			<classpath>
				<pathelement location="${h2.jdbc.jar}"/>
			</classpath>
			<arg value="-url"/><arg value="${open18.jdbc.url};IFEXISTS=true"/>
			<arg value="-user"/><arg value="${open18.jdbc.username}"/>
			<arg value="-password"/><arg value="${open18.jdbc.password}"/>
			<arg value="-script"/><arg value="${databases.dir}/import.sql"/>
		</java>
	</target>

	<!-- java -cp lib/h2.jar org.h2.tools.RunScript -url jdbc:h2:file:databases/open18-db/h2 -user open18 -password tiger -script etc/schema/open18-initial-schema.sql -->
	<!-- java -cp lib/h2.jar org.h2.tools.RunScript -url jdbc:h2:file:databases/open18-db/h2 -user open18 -password tiger -script etc/schema/open18-seed-data.sql -->
	<target name="build-db" description="Build and seed the initial H2 database for Open 18">
		<delete failonerror="false">
			<fileset dir="${open18.database.dir}" includes="h2*"/>
		</delete>
		<java classname="org.h2.tools.RunScript" fork="true">
			<classpath>
				<pathelement location="${h2.jdbc.jar}"/>
			</classpath>
			<arg value="-url"/><arg value="${open18.jdbc.url}"/>
			<arg value="-user"/><arg value="${open18.jdbc.username}"/>
			<arg value="-password"/><arg value="${open18.jdbc.password}"/>
			<arg value="-script"/><arg value="${etc.dir}/schema/open18-initial-schema.sql"/>
		</java>
		<java classname="org.h2.tools.RunScript" fork="true">
			<classpath>
				<pathelement location="${h2.jdbc.jar}"/>
			</classpath>
			<arg value="-url"/><arg value="${open18.jdbc.url}"/>
			<arg value="-user"/><arg value="${open18.jdbc.username}"/>
			<arg value="-password"/><arg value="${open18.jdbc.password}"/>
			<arg value="-script"/><arg value="${etc.dir}/schema/open18-seed-data.sql"/>
		</java>
	</target>

	<!-- java -cp lib/h2.jar org.h2.tools.RunScript -url jdbc:h2:file:databases/open18-db/h2 -user open18 -password tiger -script etc/schema/open18-trivia-data.sql -->
	<target name="seed-trivia" description="Seed the Open 18 database with sample trivia questions (chapter 12)">
		<java classname="org.h2.tools.RunScript" fork="true">
			<classpath>
				<pathelement location="${h2.jdbc.jar}"/>
			</classpath>
			<arg value="-url"/><arg value="${open18.jdbc.url}"/>
			<arg value="-user"/><arg value="${open18.jdbc.username}"/>
			<arg value="-password"/><arg value="${open18.jdbc.password}"/>
			<arg value="-script"/><arg value="${etc.dir}/schema/open18-trivia-data.sql"/>
		</java>
	</target>

	<target name="launch-h2-console" description="Launch the H2 database administration console">
		<echo message="Launching H2 admin console... (use Ctrl+C to shutdown)"/>
		<echo message="Use the JDBC URL: ${open18.jdbc.url};IFEXISTS=TRUE;FILE_LOCK=NO"/>
		<java classname="org.h2.tools.Server" fork="true">
			<classpath>
				<pathelement location="${h2.jdbc.jar}"/>
			</classpath>
			<arg value="-web"/>
		</java>
	</target>

	<target name="launch-h2" description="Launch the H2 database in client-server mode (requires different JDBC URL)">
		<echo message="Starting H2 and launching H2 admin console... (use Ctrl+C to shutdown)"/>
		<java classname="org.h2.tools.Server" fork="true">
			<classpath>
				<pathelement location="${h2.jdbc.jar}"/>	
			</classpath>
			<arg value="-tcp"/>
			<arg value="-web"/>
			<arg value="-baseDir"/><arg value="${databases.dir}"/>
		</java>
	</target>

	<target name="dist" depends="clean-all">
		<tstamp/>
		<mkdir dir="dist"/>
		<delete file="dist/seaminaction-${DSTAMP}.zip"/>
		<zip zipfile="dist/seaminaction-${DSTAMP}.zip">
			<zipfileset prefix="seaminaction" dir="${basedir}">
				<include name="build.xml"/>
				<include name="build.properties"/>
				<include name="README.txt"/>
				<include name="lib/h2.jar"/>
				<include name="lib/ant-contrib*.jar"/>
				<include name="databases/open18-db/**"/>
				<include name="etc/**"/>

				<!-- temporary hack to include empty project directory -->
				<include name="projects/.directory"/>

				<include name="stages/**"/>
				<exclude name="stages/projects-baseline/**"/>
				<exclude name="stages/*/*/lib/**"/>
				<exclude name="stages/*/*/bootstrap/**"/>
				<exclude name="stages/*/*/exploded-archives/**"/>
				<exclude name="stages/*/*/nbproject/private/**"/>
			</zipfileset>
		</zip>
	</target>

	<!-- ant add-svn-ignores -Dpath=prototype/projects/golftips -->
	<!-- svn add `svn status | grep "^?" | sed 's/^? *//'` -->
	<target name="add-svn-ignores">
		<fail unless="path" message="Please specify a path using -Dpath=path/to/project"/>
		<taskdef resource="svntask.properties"/>
		<svn javahl="${svn.javahl}">
			<add dir="${path}" recurse="false"/>
		</svn>
		<svn javahl="${svn.javahl}">
			<propset path="${path}" name="svn:ignore" file="ignored-resources"/>
		</svn>
		<svn javahl="${svn.javahl}">
			<add dir="${path}/nbproject" recurse="false"/>
		</svn>
		<svn javahl="${svn.javahl}">
			<propset path="${path}/nbproject" name="svn:ignore" value="private"/>
		</svn>
	</target>

	<target name="update-project" depends="select-project" description="Update the libraries for the selected project (menu provided)">
		<ant dir="${seam.home}/seam-gen" target="update-project" inheritAll="false">
			<property name="workspace.home" value="${workspace.home}"/>
			<property name="project.name" value="${project.name}"/>
			<property name="project.type" value="${project.type}"/>
		</ant>
	</target>

	<target name="select-project">
		<echo>Available projects:

 A: projects-part1 -> golftips
 B: projects-part1 -> open18
 C: projects-part1 -> open18ee
 D: projects-ch03 -> open18
 E: projects-ch04 -> open18
 F: projects-ch05 -> open18
 G: projects-ch06 -> open18
 H: projects-part3 -> open18
 I: projects-ch11 -> open18
 J: projects-ch12 -> open18
 K: projects-ch13 -> open18
 </echo>
		<input addproperty="project.index" message="Enter the letter that corresponds to the project you want to update:"
			validargs="A,B,C,D,E,F,G,H,I,J,K"/>
		<switch value="${project.index}">
			<case value="A">
				<property name="project.selection" value="projects-part1/golftips"/>
			</case>
			<case value="B">
				<property name="project.selection" value="projects-part1/open18"/>
			</case>
			<case value="C">
				<property name="project.selection" value="projects-part1/open18ee"/>
			</case>
			<case value="D">
				<property name="project.selection" value="projects-ch03/open18"/>
			</case>
			<case value="E">
				<property name="project.selection" value="projects-ch04/open18"/>
			</case>
			<case value="F">
				<property name="project.selection" value="projects-ch05/open18"/>
			</case>
			<case value="H">
				<property name="project.selection" value="projects-ch06/open18"/>
			</case>
			<case value="H">
				<property name="project.selection" value="projects-part3/open18"/>
			</case>
			<case value="I">
				<property name="project.selection" value="projects-ch11/open18"/>
			</case>
			<case value="J">
				<property name="project.selection" value="projects-ch12/open18"/>
			</case>
			<case value="K">
				<property name="project.selection" value="projects-ch13/open18"/>
			</case>
		</switch>
		<propertyregex property="project.name"
			input="${project.selection}"
			regexp="^.*/(.*)$"
			select="\1"/>
		<propertyregex property="workspace.home"
			input="${project.selection}"
			regexp="^(.*)/.*$"
			select="${stages.dir}/\1"/>
		<condition property="project.type" value="ear" else="war">
			<contains string="${project.name}" substring="ee"/>
		</condition>
	</target>

</project>
